{
  "address": "0x3fdc08D815cc4ED3B7F69Ee246716f2C8bCD6b07",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "serie",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "artwork",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gallery",
          "type": "address"
        }
      ],
      "name": "LogBuy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "editions",
          "type": "uint256"
        }
      ],
      "name": "LogCreateSeries",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "serie",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "artwork",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "gallery",
          "type": "address"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "author",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "process",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "imageUrls",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "createSeries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serie",
          "type": "uint256"
        }
      ],
      "name": "getSerie",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "process",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "artworks",
              "type": "string[]"
            }
          ],
          "internalType": "struct UnRealArtV2.Series",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "series",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "author",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "process",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seriesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x490c9714c4361136cd6cece88049d58878b5f3513bc83fda7f68e670fece76f3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3fdc08D815cc4ED3B7F69Ee246716f2C8bCD6b07",
    "transactionIndex": 0,
    "gasUsed": "3015137",
    "logsBloom": "0x
    "blockHash": "0x5cc3d9f1ff641278e52fbe81dd6116db455e942adb23dae9ce3b03e7fc3edf58",
    "transactionHash": "0x490c9714c4361136cd6cece88049d58878b5f3513bc83fda7f68e670fece76f3",
    "logs": [],
    "blockNumber": 15533478,
    "cumulativeGasUsed": "3015137",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "72392bbf0ead976c764686704a716ae7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"serie\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artwork\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gallery\",\"type\":\"address\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editions\",\"type\":\"uint256\"}],\"name\":\"LogCreateSeries\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"serie\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"artwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"gallery\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"process\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"imageUrls\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createSeries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serie\",\"type\":\"uint256\"}],\"name\":\"getSerie\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"process\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"artworks\",\"type\":\"string[]\"}],\"internalType\":\"struct UnRealArtV2.Series\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"series\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"process\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seriesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnRealArt.sol\":\"UnRealArtV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50000},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC1155.sol\\\";\\nimport \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"./libraries/BoringAddress.sol\\\";\\n\\n// Written by OreNoMochi (https://github.com/OreNoMochii), BoringCrypto\\n\\ncontract ERC1155 is IERC1155 {\\n    using BoringAddress for address;\\n\\n    // mappings\\n    mapping(address => mapping(address => bool)) public override isApprovedForAll; // map of operator approval\\n    mapping(address => mapping(uint256 => uint256)) public override balanceOf; // map of tokens owned by\\n    mapping(uint256 => uint256) public totalSupply; // totalSupply per token\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override virtual returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector || // EIP-165\\n            interfaceID == 0xd9b67a26 || // ERC-1155\\n            interfaceID == 0x0e89341c; // EIP-1155 Metadata\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory balances) {\\n        uint256 len = owners.length;\\n        require(len == ids.length, \\\"ERC1155: Length mismatch\\\");\\n\\n        balances = new uint256[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            balances[i] = balanceOf[owners[i]][ids[i]];\\n        }\\n    }\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[to][id] += value;\\n        totalSupply[id] += value;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, value);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) internal {\\n        require(from != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        totalSupply[id] -= value;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, value);\\n    }\\n\\n    function _transferSingle(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        balanceOf[to][id] += value;\\n\\n        emit TransferSingle(msg.sender, from, to, id, value);\\n    }\\n\\n    function _transferBatch(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            balanceOf[from][id] -= value;\\n            balanceOf[to][id] += value;\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, values);\\n    }\\n\\n    function _requireTransferAllowed(address from) internal view virtual {\\n        require(from == msg.sender || isApprovedForAll[from][msg.sender] == true, \\\"Transfer not allowed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override {\\n        _requireTransferAllowed(from);\\n\\n        _transferSingle(from, to, id, value);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, value, data) ==\\n                    bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"ERC1155: Length mismatch\\\");\\n        _requireTransferAllowed(from);\\n\\n        _transferBatch(from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, values, data) ==\\n                    bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function uri(\\n        uint256 /*assetId*/\\n    ) external view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xeff0dc91b1e3458ce21c4db82bf3e0bbdffa39c4da5f8b548efd119691c070a8\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./IERC165.sol\\\";\\n\\ninterface IERC1155 is IERC165 {\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n    event URI(string _value, uint256 indexed _id);\\n\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external;\\n\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\n\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xefad89c674fc357dc80a2b323668f84f99d597b7a8f26e6118121c1df377ab2e\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4c1ebce6b3a994520a94dfa54653846976437db355270182f3a66ed603e9591b\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5a8249860382d88e529ffc967600bbe99bb2d9130ba6d22c6c63d9fe208308d2\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable no-inline-assembly\\n// solhint-disable no-empty-blocks\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n                case 1 {\\n                    mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n                }\\n                case 2 {\\n                    mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n                }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x497f2590ad8b44a211cd05f030216dc4cba22fb14057bdeab6d6161066355262\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable no-inline-assembly\\n\\nlibrary BoringAddress {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendNative(address to, uint256 amount) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"BoringAddress: transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x38fd10e9c0a6e38e3ba67cd27d1948c1c6ca58f55c9acb517a1ed779e7e9c3da\",\"license\":\"MIT\"},\"contracts/UnRealArt.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/ERC1155.sol\\\";\\n\\n// Simple contract for registering series of NFT artworks\\n// Contract isn't very flexible on purpose. Trying to keep it as simple as possible, since no audits are done and minimal testing.\\ncontract UnRealArtV2 is ERC1155 {\\n    using BoringAddress for address;\\n    using Base64 for bytes;\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return super.supportsInterface(interfaceID) || interfaceID == 0x2a55205a; // EIP-2981 NFT Royalty Standard\\n    }\\n\\n    struct Series {\\n        address creator;\\n        string author; // Twitter handle or name\\n        string name; // Short name of the series\\n        string description; // Description of the series, such as inspiration, etc\\n        string process; // Describe the tools & prompts used\\n        uint256 price; // Price\\n        // Each image should be added to IPFS **individually**. This means that anyone owning the\\n        // NFT only needs to keep a copy of their picture to proof ownership in the (far) future,\\n        // not the entire series as is the case with a lot of PFP NFTs :D\\n        string[] artworks; // List of IPFS v0 CIDs of the artworks \\\"Qm....\\\"\\n    }\\n\\n    Series[] public series;\\n\\n    function getSerie(uint256 serie) public view returns (Series memory) {\\n        return series[serie];\\n    }\\n\\n    function seriesCount() public view returns (uint256) {\\n        return series.length;\\n    }\\n\\n    event LogCreateSeries(uint256 indexed index, address indexed to, uint256 editions);\\n    event LogBuy(uint256 indexed serie, uint256 indexed artwork, uint256 price, address indexed gallery);\\n\\n    function createSeries(\\n        string calldata author,\\n        string calldata name,\\n        string calldata description,\\n        string calldata process,\\n        uint256 price,\\n        string[] calldata imageUrls,\\n        address to\\n    ) public returns (uint256 index) {\\n        // Get the index of the new series in the array\\n        index = series.length;\\n\\n        // Initialize a new series with name and description.\\n        // Creator is set to the sender\\n        Series memory s;\\n        s.creator = to;\\n        s.author = author;\\n        s.name = name;\\n        s.description = description;\\n        s.process = process;\\n        s.price = price;\\n\\n        series.push(s);\\n\\n        for (uint256 i = 0; i < imageUrls.length; i++) {\\n            _mint(\\n                to,\\n                index * uint256(1e6) + series[index].artworks.length,\\n                1\\n            );\\n            series[index].artworks.push(imageUrls[i]);\\n        }\\n\\n        emit LogCreateSeries(index, to, 1);\\n    }\\n\\n    // Reentrancy guard on the buy function\\n    bool private buying = false;\\n\\n    function buy(\\n        uint32 serie,\\n        uint32 artwork,\\n        address gallery\\n    ) public payable {\\n        require(!buying, \\\"Not again!\\\");\\n        buying = true;\\n        uint256 id = uint256(uint32(serie)) * 1e6 + uint256(uint32(artwork));\\n\\n        require(balanceOf[series[serie].creator][id] == 1, \\\"Not for sale\\\"); // Has to be owned by the creator (series owner), could have been transferred\\n        uint256 price = series[serie].price;\\n        // Check if enough ETH was sent. Not really needed as we attempt the actual transfer later.\\n        require(msg.value >= price, \\\"Not enough funds sent\\\");\\n        require(msg.sender != series[serie].creator, \\\"Cannot buy own work\\\");\\n\\n        _transferSingle(series[serie].creator, msg.sender, id, 1);\\n\\n        // Refund any excess ETH by sending any remaining ETH on the contract back.\\n        msg.sender.sendNative(address(this).balance - price);\\n\\n        // The creator gets the remaining 90%\\n        series[serie].creator.sendNative((price * 90) / 100);\\n\\n        // The gallery that sold the artwork gets 10% commission\\n        // Sure, the buyer could redirect this back to themselves when they bypass the UI, but like\\n        // royalty payments, we rely on some honesty/convenience here. If no gallery is given, the 10%\\n        // goes to the platform\\n        (gallery != address(0) ? gallery : 0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E).sendNative((price * 10) / 100);\\n\\n        emit LogBuy(serie, artwork, price, gallery);\\n        buying = false;\\n    }\\n\\n    function royaltyInfo(uint256 id, uint256 price) public view returns (address receiver, uint256 royaltyAmount) {\\n        return (series[id / 1e6].creator, price / 10);\\n    }\\n\\n    // From OpenZeppelin Math.sol\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // From OpenZeppelin Strings.sol\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    function uri(uint256 id) external view override returns (string memory) {\\n        uint256 serie = id / 1e6;\\n        uint256 artwork = id % 1e6;\\n\\n        // solhint-disable quotes\\n        string memory json_part1 = string(abi.encodePacked(\\n            '{\\\"name\\\":\\\"',\\n            series[serie].name,\\n            \\\" \\\", toString(artwork + 1),\\n            '\\\",\\\"description\\\":\\\"',\\n            series[serie].description,\\n            '\\\",\\\"image\\\":\\\"ipfs://ipfs/',\\n            series[serie].artworks[artwork]\\n        ));\\n\\n        string memory json_part2 = string(abi.encodePacked(\\n            '\\\",\\\"external_url\\\": \\\"https://un-real-art.com/#/image/', toString(serie), '/', toString(artwork), \\n            '\\\",\\\"decimals\\\":0,\\\"properties\\\":{\\\"author\\\":\\\"',\\n            series[serie].author,\\n            '\\\",\\\"process\\\":\\\"',\\n            series[serie].process,\\n            '\\\"}}'\\n        ));\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    abi\\n                        .encodePacked(json_part1, json_part2)\\n                        .encode()\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x76d1942b6889dd882a45028f59bbb18de1b2567faf1b61001d19346b6e1842e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526004805460ff1916905534801561001a57600080fd5b506135d48061002a6000396000f3fe6080604052600436106100e75760003560e01c80637282075b1161008a578063d7f2c0ef11610059578063d7f2c0ef146102dc578063dc22cb6a146102f1578063e985e9c514610323578063f242432a1461035b57600080fd5b80637282075b1461025c578063a22cb4651461027c578063bd85b0391461029c578063d78e7c9a146102c957600080fd5b80632a55205a116100c65780632a55205a146101945780632eb2c2d6146101e05780634e1273f41461020257806353576d951461022f57600080fd5b8062fdd58e146100ec57806301ffc9a7146101375780630e89341c14610167575b600080fd5b3480156100f857600080fd5b50610124610107366004612693565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561014357600080fd5b506101576101523660046126eb565b61037b565b604051901515815260200161012e565b34801561017357600080fd5b5061018761018236600461270f565b6103d8565b60405161012e91906127a2565b3480156101a057600080fd5b506101b46101af3660046127b5565b610592565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091520161012e565b3480156101ec57600080fd5b506102006101fb36600461285e565b6105f2565b005b34801561020e57600080fd5b5061022261021d366004612919565b6107db565b60405161012e9190612985565b34801561023b57600080fd5b5061024f61024a36600461270f565b61095f565b60405161012e9190612a1e565b34801561026857600080fd5b50610124610277366004612b02565b610d36565b34801561028857600080fd5b50610200610297366004612c29565b6110fd565b3480156102a857600080fd5b506101246102b736600461270f565b60026020526000908152604090205481565b6102006102d7366004612c79565b611192565b3480156102e857600080fd5b50600354610124565b3480156102fd57600080fd5b5061031161030c36600461270f565b611614565b60405161012e96959493929190612cbc565b34801561032f57600080fd5b5061015761033e366004612d39565b600060208181529281526040808220909352908152205460ff1681565b34801561036757600080fd5b50610200610376366004612d6c565b611893565b600061038682611a06565b806103d257507f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060006103e9620f424084612e42565b905060006103fa620f424085612e56565b905060006003838154811061041157610411612e6a565b90600052602060002090600702016002016104378360016104329190612e99565b611ae7565b6003858154811061044a5761044a612e6a565b90600052602060002090600702016003016003868154811061046e5761046e612e6a565b9060005260206000209060070201600601858154811061049057610490612e6a565b906000526020600020016040516020016104ad9493929190612fd6565b604051602081830303815290604052905060006104c984611ae7565b6104d284611ae7565b600386815481106104e5576104e5612e6a565b90600052602060002090600702016001016003878154811061050957610509612e6a565b906000526020600020906007020160040160405160200161052d94939291906130b3565b6040516020818303038152906040529050610568828260405160200161055492919061320f565b604051602081830303815290604052611baf565b604051602001610578919061323e565b604051602081830303815290604052945050505050919050565b60008060036105a4620f424086612e42565b815481106105b4576105b4612e6a565b600091825260209091206007909102015473ffffffffffffffffffffffffffffffffffffffff166105e6600a85612e42565b915091505b9250929050565b848314610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f455243313135353a204c656e677468206d69736d61746368000000000000000060448201526064015b60405180910390fd5b61066988611d88565b610677888888888888611e48565b73ffffffffffffffffffffffffffffffffffffffff87163b156107d1576040517fbc197c81000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff89169063bc197c81906106f69033908d908c908c908c908c908c908c9060040161331b565b602060405180830381600087803b15801561071057600080fd5b505af1158015610724573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610748919061338c565b7fffffffff0000000000000000000000000000000000000000000000000000000016146107d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f57726f6e672072657475726e2076616c756500000000000000000000000000006044820152606401610657565b5050505050505050565b606083828114610847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f455243313135353a204c656e677468206d69736d6174636800000000000000006044820152606401610657565b8067ffffffffffffffff811115610860576108606133a9565b604051908082528060200260200182016040528015610889578160200160208202803683370190505b50915060005b8181101561095557600160008888848181106108ad576108ad612e6a565b90506020020160208101906108c291906133d8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086868481811061091057610910612e6a565b9050602002013581526020019081526020016000205483828151811061093857610938612e6a565b60209081029190910101528061094d816133f3565b91505061088f565b5050949350505050565b6109b56040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160008152602001606081525090565b600382815481106109c8576109c8612e6a565b60009182526020918290206040805160e08101909152600790920201805473ffffffffffffffffffffffffffffffffffffffff1682526001810180549293919291840191610a1590612eb1565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4190612eb1565b8015610a8e5780601f10610a6357610100808354040283529160200191610a8e565b820191906000526020600020905b815481529060010190602001808311610a7157829003601f168201915b50505050508152602001600282018054610aa790612eb1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad390612eb1565b8015610b205780601f10610af557610100808354040283529160200191610b20565b820191906000526020600020905b815481529060010190602001808311610b0357829003601f168201915b50505050508152602001600382018054610b3990612eb1565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6590612eb1565b8015610bb25780601f10610b8757610100808354040283529160200191610bb2565b820191906000526020600020905b815481529060010190602001808311610b9557829003601f168201915b50505050508152602001600482018054610bcb90612eb1565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf790612eb1565b8015610c445780601f10610c1957610100808354040283529160200191610c44565b820191906000526020600020905b815481529060010190602001808311610c2757829003601f168201915b505050505081526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020016000905b82821015610d28578382906000526020600020018054610c9b90612eb1565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc790612eb1565b8015610d145780601f10610ce957610100808354040283529160200191610d14565b820191906000526020600020905b815481529060010190602001808311610cf757829003601f168201915b505050505081526020019060010190610c7c565b505050915250909392505050565b6003546040805160e08101825260008082526060602083018190529282018390528282018390526080820183905260a082015260c081019190915282816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060208083019190915260408051601f8e018390048302810183019091528c8152908d908d908190840183828082843760009201919091525050505060408083019190915280516020601f8c018190048102820181019092528a8152908b908b90819084018382808284376000920191909152505050506060820152604080516020601f8a018190048102820181019092528881529089908990819084018382808284376000920182905250608086019490945250505060a0820187905260038054600181018255915281517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b600790920291820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117815560208084015180518594610f4f937fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c90910192019061248f565b5060408201518051610f6b91600284019160209091019061248f565b5060608201518051610f8791600384019160209091019061248f565b5060808201518051610fa391600484019160209091019061248f565b5060a0820151600582015560c08201518051610fc9916006840191602090910190612513565b50505060005b84811015611099576110208460038581548110610fee57610fee612e6a565b600091825260209091206006600790920201015461100f620f42408761342c565b6110199190612e99565b6001612039565b6003838154811061103357611033612e6a565b906000526020600020906007020160060186868381811061105657611056612e6a565b90506020028101906110689190613469565b8254600181018455600093845260209093206110869301919061256c565b5080611091816133f3565b915050610fcf565b508273ffffffffffffffffffffffffffffffffffffffff16827fcd40df8670c096c0159399943af0ac49e339710909f2ba69af7e02521dd806ef60016040516110e491815260200190565b60405180910390a3509c9b505050505050505050505050565b3360008181526020818152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60045460ff16156111ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f7420616761696e21000000000000000000000000000000000000000000006044820152606401610657565b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600063ffffffff80841690611244908616620f424061342c565b61124e9190612e99565b90506001600060038663ffffffff168154811061126d5761126d612e6a565b6000918252602080832060079092029091015473ffffffffffffffffffffffffffffffffffffffff1683528281019390935260409182018120848252909252902054600114611318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420666f722073616c6500000000000000000000000000000000000000006044820152606401610657565b600060038563ffffffff168154811061133357611333612e6a565b9060005260206000209060070201600501549050803410156113b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420656e6f7567682066756e64732073656e7400000000000000000000006044820152606401610657565b60038563ffffffff16815481106113ca576113ca612e6a565b600091825260209091206007909102015473ffffffffffffffffffffffffffffffffffffffff1633141561145a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f43616e6e6f7420627579206f776e20776f726b000000000000000000000000006044820152606401610657565b6114a660038663ffffffff168154811061147657611476612e6a565b600091825260209091206007909102015473ffffffffffffffffffffffffffffffffffffffff1633846001612179565b6114ba6114b382476134ce565b33906122de565b61151a60646114ca83605a61342c565b6114d49190612e42565b60038763ffffffff16815481106114ed576114ed612e6a565b600091825260209091206007909102015473ffffffffffffffffffffffffffffffffffffffff16906122de565b611587606461152a83600a61342c565b6115349190612e42565b73ffffffffffffffffffffffffffffffffffffffff851661156957739e6e344f94305d36ea59912b0911fe2c9149ed3e61156b565b845b73ffffffffffffffffffffffffffffffffffffffff16906122de565b8273ffffffffffffffffffffffffffffffffffffffff168463ffffffff168663ffffffff167f274826f54e4f9c71f4bb049589d661679b44043629a92ac0f29c995f0e790abf846040516115dd91815260200190565b60405180910390a45050600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055505050565b6003818154811061162457600080fd5b60009182526020909120600790910201805460018201805473ffffffffffffffffffffffffffffffffffffffff90921693509061166090612eb1565b80601f016020809104026020016040519081016040528092919081815260200182805461168c90612eb1565b80156116d95780601f106116ae576101008083540402835291602001916116d9565b820191906000526020600020905b8154815290600101906020018083116116bc57829003601f168201915b5050505050908060020180546116ee90612eb1565b80601f016020809104026020016040519081016040528092919081815260200182805461171a90612eb1565b80156117675780601f1061173c57610100808354040283529160200191611767565b820191906000526020600020905b81548152906001019060200180831161174a57829003601f168201915b50505050509080600301805461177c90612eb1565b80601f01602080910402602001604051908101604052809291908181526020018280546117a890612eb1565b80156117f55780601f106117ca576101008083540402835291602001916117f5565b820191906000526020600020905b8154815290600101906020018083116117d857829003601f168201915b50505050509080600401805461180a90612eb1565b80601f016020809104026020016040519081016040528092919081815260200182805461183690612eb1565b80156118835780601f1061185857610100808354040283529160200191611883565b820191906000526020600020905b81548152906001019060200180831161186657829003601f168201915b5050505050908060050154905086565b61189c86611d88565b6118a886868686612179565b73ffffffffffffffffffffffffffffffffffffffff85163b156119fe576040517ff23a6e61000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff87169063f23a6e61906119239033908b908a908a908a908a906004016134e5565b602060405180830381600087803b15801561193d57600080fd5b505af1158015611951573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611975919061338c565b7fffffffff0000000000000000000000000000000000000000000000000000000016146119fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f57726f6e672072657475726e2076616c756500000000000000000000000000006044820152606401610657565b505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a7000000000000000000000000000000000000000000000000000000001480611a9957507fd9b67a26000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b806103d25750507fffffffff00000000000000000000000000000000000000000000000000000000167f0e89341c000000000000000000000000000000000000000000000000000000001490565b60606000611af4836123ad565b600101905060008167ffffffffffffffff811115611b1457611b146133a9565b6040519080825280601f01601f191660200182016040528015611b3e576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611ba257611ba7565b611b48565b509392505050565b6060815160001415611bcf57505060408051602081019091526000815290565b600060405180606001604052806040815260200161355f6040913990506000600384516002611bfe9190612e99565b611c089190612e42565b611c1390600461342c565b90506000611c22826020612e99565b67ffffffffffffffff811115611c3a57611c3a6133a9565b6040519080825280601f01601f191660200182016040528015611c64576020820181803683370190505b509050818152600183018586518101602084015b81831015611cd0576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101611c78565b600389510660018114611cea5760028114611d3457611d7a565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe830152611d7a565b7f3d000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301525b509398975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116331480611ddf575073ffffffffffffffffffffffffffffffffffffffff811660009081526020818152604080832033845290915290205460ff1615156001145b611e45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5472616e73666572206e6f7420616c6c6f7765640000000000000000000000006044820152606401610657565b50565b73ffffffffffffffffffffffffffffffffffffffff8516611ec5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f2030206164647265737300000000000000000000000000000000000000006044820152606401610657565b60005b83811015611fae576000858583818110611ee457611ee4612e6a565b9050602002013590506000848484818110611f0157611f01612e6a565b73ffffffffffffffffffffffffffffffffffffffff8c16600090815260016020908152604080832088845282528220805493909102949094013594508493925090611f4d9084906134ce565b909155505073ffffffffffffffffffffffffffffffffffffffff8816600090815260016020908152604080832085845290915281208054839290611f92908490612e99565b9250508190555050508080611fa6906133f3565b915050611ec8565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878787876040516120299493929190613537565b60405180910390a4505050505050565b73ffffffffffffffffffffffffffffffffffffffff83166120b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f2030206164647265737300000000000000000000000000000000000000006044820152606401610657565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160209081526040808320858452909152812080548392906120f6908490612e99565b909155505060008281526002602052604081208054839290612119908490612e99565b9091555050604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff85169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b73ffffffffffffffffffffffffffffffffffffffff83166121f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f2030206164647265737300000000000000000000000000000000000000006044820152606401610657565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320858452909152812080548392906122369084906134ce565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526001602090815260408083208584529091528120805483929061227b908490612e99565b9091555050604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff808616929087169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a450505050565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114612338576040519150601f19603f3d011682016040523d82523d6000602084013e61233d565b606091505b50509050806123a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f426f72696e67416464726573733a207472616e73666572206661696c656400006044820152606401610657565b505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106123f6577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612422576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061244057662386f26fc10000830492506010015b6305f5e1008310612458576305f5e100830492506008015b612710831061246c57612710830492506004015b6064831061247e576064830492506002015b600a83106103d25760010192915050565b82805461249b90612eb1565b90600052602060002090601f0160209004810192826124bd5760008555612503565b82601f106124d657805160ff1916838001178555612503565b82800160010185558215612503579182015b828111156125035782518255916020019190600101906124e8565b5061250f9291506125fe565b5090565b828054828255906000526020600020908101928215612560579160200282015b82811115612560578251805161255091849160209091019061248f565b5091602001919060010190612533565b5061250f929150612613565b82805461257890612eb1565b90600052602060002090601f01602090048101928261259a5760008555612503565b82601f106125d1578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612503565b82800160010185558215612503579182015b828111156125035782358255916020019190600101906125e3565b5b8082111561250f57600081556001016125ff565b8082111561250f5760006126278282612630565b50600101612613565b50805461263c90612eb1565b6000825580601f1061264c575050565b601f016020900490600052602060002090810190611e4591906125fe565b803573ffffffffffffffffffffffffffffffffffffffff8116811461268e57600080fd5b919050565b600080604083850312156126a657600080fd5b6126af8361266a565b946020939093013593505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114611e4557600080fd5b6000602082840312156126fd57600080fd5b8135612708816126bd565b9392505050565b60006020828403121561272157600080fd5b5035919050565b60005b8381101561274357818101518382015260200161272b565b83811115612752576000848401525b50505050565b60008151808452612770816020860160208601612728565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006127086020830184612758565b600080604083850312156127c857600080fd5b50508035926020909101359150565b60008083601f8401126127e957600080fd5b50813567ffffffffffffffff81111561280157600080fd5b6020830191508360208260051b85010111156105eb57600080fd5b60008083601f84011261282e57600080fd5b50813567ffffffffffffffff81111561284657600080fd5b6020830191508360208285010111156105eb57600080fd5b60008060008060008060008060a0898b03121561287a57600080fd5b6128838961266a565b975061289160208a0161266a565b9650604089013567ffffffffffffffff808211156128ae57600080fd5b6128ba8c838d016127d7565b909850965060608b01359150808211156128d357600080fd5b6128df8c838d016127d7565b909650945060808b01359150808211156128f857600080fd5b506129058b828c0161281c565b999c989b5096995094979396929594505050565b6000806000806040858703121561292f57600080fd5b843567ffffffffffffffff8082111561294757600080fd5b612953888389016127d7565b9096509450602087013591508082111561296c57600080fd5b50612979878288016127d7565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b818110156129bd578351835292840192918401916001016129a1565b50909695505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015612a115782840389526129ff848351612758565b988501989350908401906001016129e7565b5091979650505050505050565b6020815273ffffffffffffffffffffffffffffffffffffffff82511660208201526000602083015160e06040840152612a5b610100840182612758565b905060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080858403016060860152612a978383612758565b92506060860151915080858403016080860152612ab48383612758565b925060808601519150808584030160a0860152612ad18383612758565b925060a086015160c086015260c08601519150808584030160e086015250612af982826129c9565b95945050505050565b60008060008060008060008060008060008060e08d8f031215612b2457600080fd5b67ffffffffffffffff8d351115612b3a57600080fd5b612b478e8e358f0161281c565b909c509a5067ffffffffffffffff60208e01351115612b6557600080fd5b612b758e60208f01358f0161281c565b909a50985067ffffffffffffffff60408e01351115612b9357600080fd5b612ba38e60408f01358f0161281c565b909850965067ffffffffffffffff60608e01351115612bc157600080fd5b612bd18e60608f01358f0161281c565b909650945060808d0135935067ffffffffffffffff60a08e01351115612bf657600080fd5b612c068e60a08f01358f016127d7565b9093509150612c1760c08e0161266a565b90509295989b509295989b509295989b565b60008060408385031215612c3c57600080fd5b612c458361266a565b915060208301358015158114612c5a57600080fd5b809150509250929050565b803563ffffffff8116811461268e57600080fd5b600080600060608486031215612c8e57600080fd5b612c9784612c65565b9250612ca560208501612c65565b9150612cb36040850161266a565b90509250925092565b73ffffffffffffffffffffffffffffffffffffffff8716815260c060208201526000612ceb60c0830188612758565b8281036040840152612cfd8188612758565b90508281036060840152612d118187612758565b90508281036080840152612d258186612758565b9150508260a0830152979650505050505050565b60008060408385031215612d4c57600080fd5b612d558361266a565b9150612d636020840161266a565b90509250929050565b60008060008060008060a08789031215612d8557600080fd5b612d8e8761266a565b9550612d9c6020880161266a565b94506040870135935060608701359250608087013567ffffffffffffffff811115612dc657600080fd5b612dd289828a0161281c565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082612e5157612e51612de4565b500490565b600082612e6557612e65612de4565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008219821115612eac57612eac612e13565b500190565b600181811c90821680612ec557607f821691505b60208210811415612eff577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8054600090600181811c9080831680612f1f57607f831692505b6020808410821415612f5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b818015612f6e5760018114612f9d57612fca565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650612fca565b60008881526020902060005b86811015612fc25781548b820152908501908301612fa9565b505084890196505b50505050505092915050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000815260006130086009830187612f05565b7f20000000000000000000000000000000000000000000000000000000000000008152855161303e816001840160208a01612728565b7f222c226465736372697074696f6e223a22000000000000000000000000000000600192909101918201526130766012820186612f05565b90507f222c22696d616765223a22697066733a2f2f697066732f00000000000000000081526130a86017820185612f05565b979650505050505050565b7f222c2265787465726e616c5f75726c223a202268747470733a2f2f756e2d726581527f616c2d6172742e636f6d2f232f696d6167652f00000000000000000000000000602082015260008551613111816033850160208a01612728565b7f2f00000000000000000000000000000000000000000000000000000000000000603391840191820152855161314e816034840160208a01612728565b7f222c22646563696d616c73223a302c2270726f70657274696573223a7b226175603492909101918201527f74686f72223a220000000000000000000000000000000000000000000000000060548201526131ac605b820186612f05565b90507f222c2270726f63657373223a220000000000000000000000000000000000000081526131de600d820185612f05565b7f227d7d00000000000000000000000000000000000000000000000000000000008152600301979650505050505050565b60008351613221818460208801612728565b835190830190613235818360208801612728565b01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161327681601d850160208701612728565b91909101601d0192915050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156132b557600080fd5b8260051b8083602087013760009401602001938452509192915050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff808b168352808a1660208401525060a0604083015261335560a08301888a613283565b8281036060840152613368818789613283565b9050828103608084015261337d8185876132d2565b9b9a5050505050505050505050565b60006020828403121561339e57600080fd5b8151612708816126bd565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156133ea57600080fd5b6127088261266a565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561342557613425612e13565b5060010190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561346457613464612e13565b500290565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261349e57600080fd5b83018035915067ffffffffffffffff8211156134b957600080fd5b6020019150368190038213156105eb57600080fd5b6000828210156134e0576134e0612e13565b500390565b600073ffffffffffffffffffffffffffffffffffffffff808916835280881660208401525085604083015284606083015260a0608083015261352b60a0830184866132d2565b98975050505050505050565b60408152600061354b604083018688613283565b82810360208401526130a881858761328356fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220ebd13972ae915c09f54372076f9b9218023f1bdc54341c55019e86cd08adb0eb64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16,
        "contract": "contracts/UnRealArt.sol:UnRealArtV2",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 23,
        "contract": "contracts/UnRealArt.sol:UnRealArtV2",
        "label": "balanceOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 27,
        "contract": "contracts/UnRealArt.sol:UnRealArtV2",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 796,
        "contract": "contracts/UnRealArt.sol:UnRealArtV2",
        "label": "series",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Series)792_storage)dyn_storage"
      },
      {
        "astId": 957,
        "contract": "contracts/UnRealArt.sol:UnRealArtV2",
        "label": "buying",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Series)792_storage)dyn_storage": {
        "base": "t_struct(Series)792_storage",
        "encoding": "dynamic_array",
        "label": "struct UnRealArtV2.Series[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Series)792_storage": {
        "encoding": "inplace",
        "label": "struct UnRealArtV2.Series",
        "members": [
          {
            "astId": 778,
            "contract": "contracts/UnRealArt.sol:UnRealArtV2",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 780,
            "contract": "contracts/UnRealArt.sol:UnRealArtV2",
            "label": "author",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 782,
            "contract": "contracts/UnRealArt.sol:UnRealArtV2",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 784,
            "contract": "contracts/UnRealArt.sol:UnRealArtV2",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 786,
            "contract": "contracts/UnRealArt.sol:UnRealArtV2",
            "label": "process",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 788,
            "contract": "contracts/UnRealArt.sol:UnRealArtV2",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 791,
            "contract": "contracts/UnRealArt.sol:UnRealArtV2",
            "label": "artworks",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}