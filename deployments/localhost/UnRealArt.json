{
    "address": "0xf5c4a909455C00B99A90d93b48736F3196DB5621",
    "abi": [
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_operator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "_approved",
                    "type": "bool"
                }
            ],
            "name": "ApprovalForAll",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "serie",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "artwork",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint128",
                    "name": "price",
                    "type": "uint128"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "gallery",
                    "type": "address"
                }
            ],
            "name": "LogBuy",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "LogCreateSeries",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_operator",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256[]",
                    "name": "_ids",
                    "type": "uint256[]"
                },
                {
                    "indexed": false,
                    "internalType": "uint256[]",
                    "name": "_values",
                    "type": "uint256[]"
                }
            ],
            "name": "TransferBatch",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_operator",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_id",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "TransferSingle",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "string",
                    "name": "_value",
                    "type": "string"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "_id",
                    "type": "uint256"
                }
            ],
            "name": "URI",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "owners",
                    "type": "address[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "ids",
                    "type": "uint256[]"
                }
            ],
            "name": "balanceOfBatch",
            "outputs": [
                {
                    "internalType": "uint256[]",
                    "name": "balances",
                    "type": "uint256[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint32",
                    "name": "serie",
                    "type": "uint32"
                },
                {
                    "internalType": "uint32",
                    "name": "artwork",
                    "type": "uint32"
                },
                {
                    "internalType": "address",
                    "name": "gallery",
                    "type": "address"
                }
            ],
            "name": "buy",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "author",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "description",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "process",
                    "type": "string"
                },
                {
                    "internalType": "uint128",
                    "name": "price",
                    "type": "uint128"
                },
                {
                    "internalType": "string[]",
                    "name": "imageUrls",
                    "type": "string[]"
                }
            ],
            "name": "createSeries",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "index",
                    "type": "uint32"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "serie",
                    "type": "uint256"
                }
            ],
            "name": "getSerie",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "creator",
                            "type": "address"
                        },
                        {
                            "internalType": "string",
                            "name": "author",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "description",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "process",
                            "type": "string"
                        },
                        {
                            "internalType": "uint128",
                            "name": "price",
                            "type": "uint128"
                        },
                        {
                            "internalType": "string[]",
                            "name": "artworks",
                            "type": "string[]"
                        }
                    ],
                    "internalType": "struct UnRealArt.Series",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "isApprovedForAll",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "price",
                    "type": "uint256"
                }
            ],
            "name": "royaltyInfo",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "royaltyAmount",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256[]",
                    "name": "ids",
                    "type": "uint256[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "values",
                    "type": "uint256[]"
                },
                {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "name": "safeBatchTransferFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "series",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "creator",
                    "type": "address"
                },
                {
                    "internalType": "string",
                    "name": "author",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "description",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "process",
                    "type": "string"
                },
                {
                    "internalType": "uint128",
                    "name": "price",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "seriesCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "approved",
                    "type": "bool"
                }
            ],
            "name": "setApprovalForAll",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "soldTo",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes4",
                    "name": "interfaceID",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256"
                }
            ],
            "name": "uri",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0xae1457502ac010319361caf159df53e7bab37c427e409ab2f14f92f27c6a4385",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xf5c4a909455C00B99A90d93b48736F3196DB5621",
        "transactionIndex": 0,
        "gasUsed": "3003266",
        "logsBloom": "0x
        "blockHash": "0x4b7612d91572deaba54a043c6efca24b3f3d5b0c66480f740447686badbf228e",
        "transactionHash": "0xae1457502ac010319361caf159df53e7bab37c427e409ab2f14f92f27c6a4385",
        "logs": [],
        "blockNumber": 15457705,
        "cumulativeGasUsed": "3003266",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "ddca10809ff784869b1128d42fba46b0",
    "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"serie\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artwork\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gallery\",\"type\":\"address\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LogCreateSeries\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"serie\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"artwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"gallery\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"process\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"string[]\",\"name\":\"imageUrls\",\"type\":\"string[]\"}],\"name\":\"createSeries\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serie\",\"type\":\"uint256\"}],\"name\":\"getSerie\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"process\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"string[]\",\"name\":\"artworks\",\"type\":\"string[]\"}],\"internalType\":\"struct UnRealArt.Series\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"series\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"process\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seriesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"soldTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnRealArt.sol\":\"UnRealArt\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50000},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC1155.sol\\\";\\nimport \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"./libraries/BoringAddress.sol\\\";\\n\\n// Written by OreNoMochi (https://github.com/OreNoMochii), BoringCrypto\\n\\ncontract ERC1155 is IERC1155 {\\n    using BoringAddress for address;\\n\\n    // mappings\\n    mapping(address => mapping(address => bool)) public override isApprovedForAll; // map of operator approval\\n    mapping(address => mapping(uint256 => uint256)) public override balanceOf; // map of tokens owned by\\n    mapping(uint256 => uint256) public totalSupply; // totalSupply per token\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override virtual returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector || // EIP-165\\n            interfaceID == 0xd9b67a26 || // ERC-1155\\n            interfaceID == 0x0e89341c; // EIP-1155 Metadata\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory balances) {\\n        uint256 len = owners.length;\\n        require(len == ids.length, \\\"ERC1155: Length mismatch\\\");\\n\\n        balances = new uint256[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            balances[i] = balanceOf[owners[i]][ids[i]];\\n        }\\n    }\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[to][id] += value;\\n        totalSupply[id] += value;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, value);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) internal {\\n        require(from != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        totalSupply[id] -= value;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, value);\\n    }\\n\\n    function _transferSingle(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        balanceOf[to][id] += value;\\n\\n        emit TransferSingle(msg.sender, from, to, id, value);\\n    }\\n\\n    function _transferBatch(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            balanceOf[from][id] -= value;\\n            balanceOf[to][id] += value;\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, values);\\n    }\\n\\n    function _requireTransferAllowed(address from) internal view virtual {\\n        require(from == msg.sender || isApprovedForAll[from][msg.sender] == true, \\\"Transfer not allowed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override {\\n        _requireTransferAllowed(from);\\n\\n        _transferSingle(from, to, id, value);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, value, data) ==\\n                    bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"ERC1155: Length mismatch\\\");\\n        _requireTransferAllowed(from);\\n\\n        _transferBatch(from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, values, data) ==\\n                    bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function uri(\\n        uint256 /*assetId*/\\n    ) external view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xeff0dc91b1e3458ce21c4db82bf3e0bbdffa39c4da5f8b548efd119691c070a8\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./IERC165.sol\\\";\\n\\ninterface IERC1155 is IERC165 {\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n    event URI(string _value, uint256 indexed _id);\\n\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external;\\n\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\n\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xefad89c674fc357dc80a2b323668f84f99d597b7a8f26e6118121c1df377ab2e\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4c1ebce6b3a994520a94dfa54653846976437db355270182f3a66ed603e9591b\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5a8249860382d88e529ffc967600bbe99bb2d9130ba6d22c6c63d9fe208308d2\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable no-inline-assembly\\n// solhint-disable no-empty-blocks\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n                case 1 {\\n                    mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n                }\\n                case 2 {\\n                    mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n                }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x497f2590ad8b44a211cd05f030216dc4cba22fb14057bdeab6d6161066355262\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable no-inline-assembly\\n\\nlibrary BoringAddress {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendNative(address to, uint256 amount) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"BoringAddress: transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x38fd10e9c0a6e38e3ba67cd27d1948c1c6ca58f55c9acb517a1ed779e7e9c3da\",\"license\":\"MIT\"},\"contracts/UnRealArt.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/ERC1155.sol\\\";\\n\\n// Simple contract for registering series of NFT artworks\\n// Contract isn't very flexible on purpose. Trying to keep it as simple as possible, since no audits are done and minimal testing.\\ncontract UnRealArt is ERC1155 {\\n    using BoringAddress for address;\\n    using Base64 for bytes;\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return super.supportsInterface(interfaceID) || interfaceID == 0x2a55205a; // EIP-2981 NFT Royalty Standard\\n    }\\n\\n    struct Series {\\n        address creator;\\n        string author; // Twitter handle or name\\n        string name; // Short name of the series\\n        string description; // Description of the series, such as inspiration, etc\\n        string process; // Describe the tools & prompts used\\n        uint128 price; // Price\\n        // Each image should be added to IPFS **individually**. This means that anyone owning the\\n        // NFT only needs to keep a copy of their picture to proof ownership in the (far) future,\\n        // not the entire series as is the case with a lot of PFP NFTs :D\\n        string[] artworks; // List of IPFS v0 CIDs of the artworks \\\"Qm....\\\"\\n    }\\n\\n    Series[] public series;\\n\\n    // Keeping track of artworks that are sold. Instead of storing just a boolean, we store the address it was sold\\n    // to because gas cost is the same.\\n    mapping(uint256 => address) public soldTo;\\n\\n    function getSerie(uint256 serie) public view returns (Series memory) {\\n        return series[serie];\\n    }\\n\\n    function seriesCount() public view returns (uint256) {\\n        return series.length;\\n    }\\n\\n    event LogCreateSeries(uint256 indexed index);\\n    event LogBuy(uint256 indexed serie, uint256 indexed artwork, uint128 price, address indexed gallery);\\n\\n    function createSeries(\\n        string calldata author,\\n        string calldata name,\\n        string calldata description,\\n        string calldata process,\\n        uint128 price,\\n        string[] calldata imageUrls\\n    ) public returns (uint32 index) {\\n        // Get the index of the new series in the array\\n        index = uint32(series.length);\\n\\n        // Initialize a new series with name and description.\\n        // Creator is set to the sender\\n        Series memory s;\\n        s.creator = msg.sender;\\n        s.author = author;\\n        s.name = name;\\n        s.description = description;\\n        s.process = process;\\n        s.price = price;\\n\\n        series.push(s);\\n\\n        for (uint256 i = 0; i < imageUrls.length; i++) {\\n            uint256 id = index * 1e18 + series[index].artworks.length;\\n            _mint(msg.sender, id, 1);\\n            series[index].artworks.push(imageUrls[i]);\\n        }\\n\\n        emit LogCreateSeries(index);\\n    }\\n\\n    // Reentrancy guard on the buy function\\n    bool private buying = false;\\n\\n    function buy(\\n        uint32 serie,\\n        uint32 artwork,\\n        address gallery\\n    ) public payable {\\n        require(!buying, \\\"Not again!\\\");\\n        buying = true;\\n        uint256 id = uint32(serie) * 1e18 + uint32(artwork);\\n\\n        require(soldTo[id] == address(0), \\\"Already sold\\\"); // Can only be sold once by the creator\\n        require(balanceOf[series[serie].creator][id] == 1, \\\"Not for sale\\\"); // Has to be owned by the creator (series owner), could have been transferred\\n        uint128 price = series[serie].price;\\n        // Check if enough ETH was sent. Not really needed as we attempt the actual transfer later.\\n        require(msg.value >= price, \\\"Not enough funds sent\\\");\\n        require(msg.sender != series[serie].creator, \\\"Cannot buy own work\\\");\\n\\n        // Flag as sold\\n        soldTo[id] = msg.sender;\\n\\n        _transferSingle(series[serie].creator, msg.sender, id, 1);\\n\\n        // Refund any excess ETH by sending any remaining ETH on the contract back.\\n        msg.sender.sendNative(address(this).balance - price);\\n\\n        // The creator gets the remaining 90%\\n        series[serie].creator.sendNative((price * 90) / 100);\\n\\n        // The gallery that sold the artwork gets 10% commission\\n        // Sure, the buyer could redirect this back to themselves when they bypass the UI, but like\\n        // royalty payments, we rely on some honesty/convenience here. If no gallery is given, the 10%\\n        // goes to the platform\\n        (gallery != address(0) ? gallery : 0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E).sendNative((price * 10) / 100);\\n\\n        emit LogBuy(serie, artwork, price, gallery);\\n        buying = false;\\n    }\\n\\n    function royaltyInfo(uint256 id, uint256 price) public view returns (address receiver, uint256 royaltyAmount) {\\n        return (series[id / 1e18].creator, price / 10);\\n    }\\n\\n    function uri(uint256 id) external view override returns (string memory) {\\n        uint256 serie = id / 1e18;\\n        uint256 artwork = id % 1e18;\\n\\n        // solhint-disable quotes\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    abi\\n                        .encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            series[serie].name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            series[serie].description,\\n                            '\\\",\\\"image\\\":\\\"ipfs://ipfs/',\\n                            series[serie].artworks[artwork],\\n                            '\\\",\\\"decimals\\\":0,\\\"properties\\\":{\\\"author\\\":\\\"',\\n                            series[serie].author,\\n                            '\\\",\\\"process\\\":\\\"',\\n                            series[serie].process,\\n                            '\\\"}}'\\n                        )\\n                        .encode()\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x8916dd82af64826dbd067323631ca98770d05fda8b512c7d64bdf80f12c59f2e\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "",
    "deployedBytecode": "",
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 16,
                "contract": "contracts/UnRealArt.sol:UnRealArt",
                "label": "isApprovedForAll",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
            },
            {
                "astId": 23,
                "contract": "contracts/UnRealArt.sol:UnRealArt",
                "label": "balanceOf",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
            },
            {
                "astId": 27,
                "contract": "contracts/UnRealArt.sol:UnRealArt",
                "label": "totalSupply",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_uint256,t_uint256)"
            },
            {
                "astId": 796,
                "contract": "contracts/UnRealArt.sol:UnRealArt",
                "label": "series",
                "offset": 0,
                "slot": "3",
                "type": "t_array(t_struct(Series)792_storage)dyn_storage"
            },
            {
                "astId": 800,
                "contract": "contracts/UnRealArt.sol:UnRealArt",
                "label": "soldTo",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_uint256,t_address)"
            },
            {
                "astId": 959,
                "contract": "contracts/UnRealArt.sol:UnRealArt",
                "label": "buying",
                "offset": 0,
                "slot": "5",
                "type": "t_bool"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_string_storage)dyn_storage": {
                "base": "t_string_storage",
                "encoding": "dynamic_array",
                "label": "string[]",
                "numberOfBytes": "32"
            },
            "t_array(t_struct(Series)792_storage)dyn_storage": {
                "base": "t_struct(Series)792_storage",
                "encoding": "dynamic_array",
                "label": "struct UnRealArt.Series[]",
                "numberOfBytes": "32"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => uint256))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_uint256)"
            },
            "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_mapping(t_uint256,t_uint256)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(Series)792_storage": {
                "encoding": "inplace",
                "label": "struct UnRealArt.Series",
                "members": [
                    {
                        "astId": 778,
                        "contract": "contracts/UnRealArt.sol:UnRealArt",
                        "label": "creator",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_address"
                    },
                    {
                        "astId": 780,
                        "contract": "contracts/UnRealArt.sol:UnRealArt",
                        "label": "author",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_string_storage"
                    },
                    {
                        "astId": 782,
                        "contract": "contracts/UnRealArt.sol:UnRealArt",
                        "label": "name",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_string_storage"
                    },
                    {
                        "astId": 784,
                        "contract": "contracts/UnRealArt.sol:UnRealArt",
                        "label": "description",
                        "offset": 0,
                        "slot": "3",
                        "type": "t_string_storage"
                    },
                    {
                        "astId": 786,
                        "contract": "contracts/UnRealArt.sol:UnRealArt",
                        "label": "process",
                        "offset": 0,
                        "slot": "4",
                        "type": "t_string_storage"
                    },
                    {
                        "astId": 788,
                        "contract": "contracts/UnRealArt.sol:UnRealArt",
                        "label": "price",
                        "offset": 0,
                        "slot": "5",
                        "type": "t_uint128"
                    },
                    {
                        "astId": 791,
                        "contract": "contracts/UnRealArt.sol:UnRealArt",
                        "label": "artworks",
                        "offset": 0,
                        "slot": "6",
                        "type": "t_array(t_string_storage)dyn_storage"
                    }
                ],
                "numberOfBytes": "224"
            },
            "t_uint128": {
                "encoding": "inplace",
                "label": "uint128",
                "numberOfBytes": "16"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
